#!/usr/bin/env python3
import requests
import json
from datetime import datetime
import os
import pyzipper
import time
from threading import Thread


def log(a):
    with open("logs.txt", "a") as logsfile:
        logsfile.write(f"{a}\n")


def clearLog():
    with open("logs.txt", "w") as logsfile:
        pass


def createDir(name):
    try:
        os.mkdir(name)
    except Exception as e:
        log(f"ERROR: {e}. Directory {path} was not created.")


def writeFile(path, signature, hsh, unzip, response):
    if 'file_not_found' in response.text:
        log('ERROR: {hsh} not found')
    else:
        open(f'{path}/{signature}/{hsh}.zip', 'wb').write(response.content)
        if (unzip):
            unzipFiles(path=path, signature=signature, hsh=hsh)
        else:
            log(f'OK: sample {hsh} downloaded.')


def renameFiles(path, signature):
    counter = 0
    files = os.listdir(f'{path}/{signature}')
    for file in files:
        try:
            os.rename(f'{path}/{signature}/{file}',
                      f'{path}/{signature}/{signature}_{counter}.{file.split(".")[1]}')
        except Exception as e:
            log(f'ERROR: {e}. {file} was not renamed!')
        counter += 1
    log(f'OK: Successfully {signature} renamed files!')


def unzipFiles(path, signature, hsh):
    try:
        with pyzipper.AESZipFile(f'./{path}/{signature}/{hsh}.zip') as zf:
            zf.extractall(path=f'./{path}/{signature}',
                          pwd=bytes('infected', 'utf-8'))
            log(f'OK: Sample {signature} {hsh} downloaded and unzipped.')
    except Exception as e:
        log(f"ERROR: {e}. {signature} {hsh} on extracting.. Continue.")
    time.sleep(0.333)
    try:
        os.remove(f'./{path}/{signature}/{hsh}.zip')
    except Exception as e:
        log(f"ERROR: {e}. Archive {hsh} was not removed.. Continue.")


def makeFolder(path, signature):
    if not os.path.exists("samples"):
        createDir("samples")
    if not os.path.exists(f'{path}'):
        createDir(f'{path}')
    if not os.path.exists(f'{path}/{signature}'):
        createDir(f'{path}/{signature}')


def getHashes(signature, count, date, timeout):
    req_data = {'query': 'get_siginfo', 'signature': signature, 'limit': count}
    response = requests.post(
        'https://mb-api.abuse.ch/api/v1/', data=req_data, timeout=timeout)
    json_response = response.content.decode('utf-8', 'ignore')
    response = json.loads(json_response)
    arr_hashes = []
    time.sleep(.1)
    if (response["query_status"] not in ["no_results", "illegal_signature"]):
        try:
            for i in range(len(response['data'])):
                elem = response['data'][i]
                hash_date = datetime.strptime(
                    elem['first_seen'][:10], '%Y-%m-%d')
                compare_date = datetime.strptime(date, '%d-%m-%Y')
                if hash_date >= compare_date:
                    arr_hashes.append(elem['sha256_hash'])
        except Exception as e:
            log(f"ERROR: {e}. Check response: {response}")
    return (arr_hashes)


def getFile(api, hashes, signature, unzip, path, timeout, rename):
    makeFolder(path=path, signature=signature)
    headers = {'API-KEY': api}
    for hsh in hashes:
        data = {'query': 'get_file', 'sha256_hash': hsh}
        response = requests.post('https://mb-api.abuse.ch/api/v1/', data=data,
                                 timeout=timeout, headers=headers, allow_redirects=True)
        writeFile(path=path, signature=signature,
                  hsh=hsh, unzip=unzip, response=response)
    if rename:
        renameFiles(path=path, signature=signature)


def start(api, signature, count, timeout, date, unzip, path, rename):
    hashes = getHashes(signature=signature, count=count,
                       date=date, timeout=timeout)
    log(f'Found {signature} samples: {len(hashes)}')
    if len(hashes) != 0:
        getFile(api=api, hashes=hashes, signature=signature,
                unzip=unzip, path=path, timeout=timeout, rename=rename)
    else:
        log(f'{signature} not found!')


def main():
    clearLog()
    malware_types = open('types.json', 'r')
    malware_types = json.load(malware_types)
    malwares = malware_types["malwares"]
    config = malware_types["configuration"]
    api = config["API-KEY"]
    count = config["count"]
    date = config["date"]
    unzip = bool(config["unzip"])
    rename = bool(config["rename"])
    timeout = config["timeout"]

    for malware in malwares:
        signatures = (malwares[malware])["signatures"]
        path = (malwares[malware])["path"]
        for sig in signatures:
            print(f'Start thread downloading: {sig}')
            new_thread = Thread(target=start, args=(
                api, sig, count, timeout, date, unzip, f"samples/{path}", rename))
            new_thread.start()


main()
