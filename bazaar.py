#!/usr/bin/env python3
import requests
import json
import sys
import argparse
from datetime import datetime
import os
from os.path import isfile, join
from os import listdir
import pyzipper
import time

parser = argparse.ArgumentParser(description='Downloading py-script from Malware Bazaar by abuse.ch')

parser.add_argument('-s', '--signature', help='Malware Family/Signature (For example, mirai, redline)', type=str, metavar='SIGNATURE', required=True)
parser.add_argument('-o', '--output', help='Folder name for saving (Default Signature name)', type=str, metavar='PATH', required=True)
parser.add_argument('-t', '--timeout', help='Timeout awaiting for request in seconds (For example, 15 sec)', type=int, metavar='TIMEOUT', required=False)
parser.add_argument('-d', '--date', help='From date, format DD-MM-YYYY (For example, 15-03-2023)', type=str, metavar='DATE', required=False)
parser.add_argument('-u', '--unzip', help='Unzip the downloaded file, default - False (For example, True)', default=False, metavar='UNZIP', required=False)
parser.add_argument('-c', '--count', help='Count of samples (For example, 100)', type=int, metavar='COUNT', required=False)

args = parser.parse_args()

signatures = str(args.signature).split('-')

# print(args.signature)
print(signatures)

# TO SELECT SECTION
# timeout
timeout = 15
if (args.timeout): timeout = args.timeout

for signature in signatures:
    # request
    req_data = {
        'query': 'get_siginfo',
        'signature': signature,
        'limit': 200,
    }

    # requst malwares data
    response = requests.post('https://mb-api.abuse.ch/api/v1/', data=req_data, timeout=timeout)
    json_response = response.content.decode('utf-8', 'ignore')
    response = json.loads(json_response)

    # sort by dates
    compare_date = None
    if (args.date):
        compare_date = datetime.strptime(args.date, '%d-%m-%Y')

    arr_hashes = []
    if response["query_status"] == "no_results":
        print("Error: signature not found")
        sys.exit()

    # CREATING FOLDER PATH SECTION
    foler_name = signature

    path = args.output

    if not os.path.exists(f'{path}/{foler_name}'): 
        os.mkdir(f'{path}/{foler_name}')
    path += f'/{foler_name}'

    print(f'Created folder: {path}')

    for i in range(len(response['data'])):
        elem = response['data'][i]
        
        # compare two dates
        if (args.date):
            hash_date = elem['first_seen'][:10]
            hash_date = datetime.strptime(hash_date, '%Y-%m-%d')
            if hash_date >= compare_date:
                arr_hashes.append(elem['sha256_hash'])
        else: 
            arr_hashes.append(elem['sha256_hash'])

    # DOWNLOAD SECTION
    headers = {'API-KEY': 'e00bd3f58ad809a9cbdcff99b47a9218'}
    cnt = 0

    for hsh in arr_hashes:
        data = {
            'query': 'get_file',
            'sha256_hash': hsh,
        }

        response = requests.post('https://mb-api.abuse.ch/api/v1/', data=data, timeout=timeout, headers=headers, allow_redirects=True)

        if 'file_not_found' in response.text:
            print('Error: file not found')
        else:
            open(f'{path}/{hsh}.zip', 'wb').write(response.content)
            if(args.unzip == 'True'):
                time.sleep(0.333)  
                try: 
                    with pyzipper.AESZipFile(f'{path}/{hsh}.zip') as zf:
                        zf.pwd = b'infected'
                        my_secrets = zf.extractall(f'/{path}')  
                        os.remove(f'/{path}/{hsh}.zip')
                        print(f'Sample {signature} {hsh} downloaded and unzipped.')
                except:
                    print("Error on extracting.. Continue.")
            else:
                print(f'Sample {signature} {hsh} downloaded.')  

            cnt+=1
        
        if cnt == args.count: break
        
    print(f'Successfully downloaded {signature} {cnt} samples.')